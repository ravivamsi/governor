swagger: "2.0"
info:
  description: "Server Definition for the Governor. "
  version: "1.0.0"
  title: "Governor"
  termsOfService: "http://cgovern.com/terms/"
  contact:
    email: "ivamsiravi@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "cgovern.com"
basePath: "/v2"
tags:
- name: "vitals"
  description: "Health check, Heartbeat and Overall status of Governor"
- name: "user"
  description: "User Authentication Management"
- name: "role"
  description: "Authorization Management"
- name: "project"
  description: "Project Details"
- name: "plan"
  description: "Plan Details"
- name: "stage"
  description: "Stage Details"
- name: "job"
  description: "Job Details"
- name: "task"
  description: "Task Details"
- name: "dimage"
  description: "Details of DImages supported"
- name: "worker"
  description: "Details of Workers"
- name: "variable"
  description: "Variable"
- name: "trigger"
  description: "Trigger Details"
- name: "notification"
  description: "Notification Details"
- name: "action"
  description: "Actions to be executed on a Task, Job, Stage, Plan and Project"
- name: "pipeline"
  description: "Combination of Plans, Triggers and Notifications"
schemes:
- "https"
- "http"
paths:
  /triggers:
    post:
      tags: 
      - "trigger"
      summary: "Create New Trigger"
      operationId: "addTrigger"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Trigger object"
        required: true
        schema:
          $ref: "#/definitions/Trigger"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/Trigger"
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/BadRequest"
        409:
          description: "Conflict"
    get:
      tags:
      - "trigger"
      summary: "Retrieve All Triggers"
      operationId: "getTriggers"
      responses:
        200:
          description: OK
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Trigger"
  /triggers/{triggerId}:
    put:
      tags:
      - "trigger"
      summary: "Update existing Trigger"
      operationId: "updateTriggerById"
      parameters:
      - name: "triggerId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "No Content"
          schema:
            $ref: "#/definitions/Trigger"
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/BadRequest"
        404: 
          description: "Not Found"
    delete:
      tags:
      - "trigger"
      summary: "Delete existing Trigger"
      operationId: "deleteTriggerById"
      parameters:
      - name: "triggerId"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "No Content"
          schema:
            $ref: "#/definitions/Trigger"
        404: 
          description: "Not Found"
    get:
      tags:
      - "trigger"
      summary: "Retrieve Existing Trigger"
      operationId: "getTriggerById"
      parameters:
      - name: "triggerId"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Trigger"
        404: 
          description: "Not Found"
  /notifications:
    post:
      tags: 
      - "notification"
      summary: "Create New Notification"
      operationId: "addNotification"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Notification object"
        required: true
        schema:
          $ref: "#/definitions/Notification"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/Notification"
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/BadRequest"
        409:
          description: "Conflict"
    get:
      tags:
      - "notification"
      summary: "Retrieve All Notifications"
      operationId: "getNotifications"
      responses:
        200:
          description: OK
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Notification"
  /notifications/{notificationId}:
    put:
      tags:
      - "notification"
      summary: "Update existing Notification"
      parameters:
      - name: "notificationId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "No Content"
          schema:
            $ref: "#/definitions/Notification"
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/BadRequest"
        404: 
          description: "Not Found"
    delete:
      tags:
      - "notification"
      summary: "Delete existing Notification"
      parameters:
      - name: "notificationId"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "No Content"
          schema:
            $ref: "#/definitions/Notification"
        404: 
          description: "Not Found"
    get:
      tags:
      - "notification"
      summary: "Retrieve Existing Notification"
      parameters:
      - name: "notificationId"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Notification"
        404: 
          description: "Not Found"
  /roles:
    post:
      tags: 
      - "role"
      summary: "Create New Role"
      operationId: "addRole"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Role object"
        required: true
        schema:
          $ref: "#/definitions/Role"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/Role"
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/BadRequest"
        409:
          description: "Conflict"
    get:
      tags:
      - "role"
      summary: "Retrieve All Roles"
      operationId: "getRoles"
      responses:
        200:
          description: OK
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Role"
  /roles/{roleId}:
    put:
      tags:
      - "role"
      summary: "Update existing role"
      operationId: "updateRoleById"
      parameters:
      - name: "roleId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "No Content"
          schema:
            $ref: "#/definitions/Role"
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/BadRequest"
        404: 
          description: "Not Found"
    delete:
      tags:
      - "role"
      summary: "Delete existing role"
      operationId: "deleteRoleById"
      parameters:
      - name: "roleId"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "No Content"
          schema:
            $ref: "#/definitions/Role"
        404: 
          description: "Not Found"
    get:
      tags:
      - "role"
      summary: "Retrieve Existing Role"
      operationId: "getRoleById"
      parameters:
      - name: "roleId"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Role"
        404: 
          description: "Not Found"
  /projects:
    post:
      tags: 
      - "project"
      summary: "Create New Project"
      operationId: "addProject"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Project object"
        required: true
        schema:
          $ref: "#/definitions/Project"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/Project"
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/BadRequest"
        409:
          description: "Conflict"
    get:
      tags:
      - "project"
      summary: "Retrieve All Projects"
      operationId: "getProjects"
      responses:
        200:
          description: OK
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Project"
  /projects/{projectId}:
    put:
      tags:
      - "project"
      summary: "Update existing Project"
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Project object"
        required: true
        schema:
          $ref: "#/definitions/Project"
      responses:
        204:
          description: "No Content"
          schema:
            $ref: "#/definitions/Project"
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/BadRequest"
        404: 
          description: "Not Found"
    delete:
      tags:
      - "project"
      summary: "Delete existing Project"
      parameters:
      - name: "projectId"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "No Content"
          schema:
            $ref: "#/definitions/Project"
        404: 
          description: "Not Found"
    get:
      tags:
      - "project"
      summary: "Retrieve Existing Project"
      parameters:
      - name: "projectId"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Project"
        404: 
          description: "Not Found"
  /projects/{projectId}/plans:
    post:
      tags: 
      - "plan"
      summary: "Create New Plan"
      operationId: "addPlan"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Plan object"
        required: true
        schema:
          $ref: "#/definitions/Plan"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/Plan"
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/BadRequest"
        409:
          description: "Conflict"
    get:
      tags:
      - "plan"
      summary: "Retrieve All Plans"
      operationId: "getPlans"
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: OK
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Plan"
  /projects/{projectId}/plans/{planId}:
    put:
      tags:
      - "plan"
      summary: "Update existing Plan"
      operationId: "updatePlanById"
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "planId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Plan object"
        required: true
        schema:
          $ref: "#/definitions/Plan"
      responses:
        204:
          description: "No Content"
          schema:
            $ref: "#/definitions/Plan"
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/BadRequest"
        404: 
          description: "Not Found"
    delete:
      tags:
      - "plan"
      summary: "Delete existing plan"
      operationId: "deletePlanById"
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "planId"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "No Content"
          schema:
            $ref: "#/definitions/Plan"
        404: 
          description: "Not Found"
    get:
      tags:
      - "plan"
      summary: "Retrieve Existing Plan"
      operationId: "getPlanById"
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "planId"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Plan"
        404: 
          description: "Not Found"
  /projects/{projectId}/plans/{planId}/stages:
    post:
      tags: 
      - "stage"
      summary: "Create New Stage"
      operationId: "addStage"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "planId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Stage object"
        required: true
        schema:
          $ref: "#/definitions/Stage"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/Stage"
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/BadRequest"
        409:
          description: "Conflict"
    get:
      tags:
      - "stage"
      summary: "Retrieve All Stages"
      operationId: "getStages"
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "planId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: OK
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Stage"
  /projects/{projectId}/plans/{planId}/stages/{stageId}:
    put:
      tags:
      - "stage"
      summary: "Update existing Stage"
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "planId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "stageId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Stage object"
        required: true
        schema:
          $ref: "#/definitions/Stage"
      responses:
        204:
          description: "No Content"
          schema:
            $ref: "#/definitions/Stage"
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/BadRequest"
        404: 
          description: "Not Found"
    delete:
      tags:
      - "stage"
      summary: "Delete existing Stage"
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "planId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "stageId"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "No Content"
          schema:
            $ref: "#/definitions/Stage"
        404: 
          description: "Not Found"
    get:
      tags:
      - "stage"
      summary: "Retrieve Existing Stage"
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "planId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "stageId"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Stage"
        404: 
          description: "Not Found"
  /projects/{projectId}/plans/{planId}/stages/{stageId}/jobs:
    post:
      tags: 
      - "job"
      summary: "Create New Job"
      operationId: "addJob"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "planId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "stageId"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Job object"
        required: true
        schema:
          $ref: "#/definitions/Job"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/Job"
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/BadRequest"
        409:
          description: "Conflict"
    get:
      tags:
      - "job"
      summary: "Retrieve All Jobs"
      operationId: "getJobs"
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "planId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "stageId"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: OK
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Job"
  /projects/{projectId}/plans/{planId}/stages/{stageId}/jobs/{jobId}:
    put:
      tags:
      - "job"
      summary: "Update existing job"
      operationId: "updateJobById"
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "planId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "stageId"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      - name: "jobId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Job object"
        required: true
        schema:
          $ref: "#/definitions/Job"
      responses:
        204:
          description: "No Content"
          schema:
            $ref: "#/definitions/Job"
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/BadRequest"
        404: 
          description: "Not Found"
    delete:
      tags:
      - "job"
      summary: "Delete existing Job"
      operationId: "deleteJobById"
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "planId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "stageId"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      - name: "jobId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "No Content"
          schema:
            $ref: "#/definitions/Job"
        404: 
          description: "Not Found"
    get:
      tags:
      - "job"
      summary: "Retrieve Existing Job"
      operationId: "getJobById"
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "planId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "stageId"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      - name: "jobId"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Job"
        404: 
          description: "Not Found"
  /projects/{projectId}/plans/{planId}/stages/{stageId}/jobs/{jobId}/tasks:
    post:
      tags: 
      - "task"
      summary: "Create New Task"
      operationId: "addTask"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "planId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "stageId"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      - name: "jobId"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Task object"
        required: true
        schema:
          $ref: "#/definitions/Task"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/Task"
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/BadRequest"
        409:
          description: "Conflict"
    get:
      tags:
      - "task"
      summary: "Retrieve All Tasks"
      operationId: "getTasks"
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "planId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "stageId"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      - name: "jobId"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: OK
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Task"
  /projects/{projectId}/plans/{planId}/stages/{stageId}/jobs/{jobId}/tasks/{taskId}:
    put:
      tags:
      - "task"
      summary: "Update existing Task"
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "planId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "stageId"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      - name: "jobId"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      - name: "taskId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Task object"
        required: true
        schema:
          $ref: "#/definitions/Task"
      responses:
        204:
          description: "No Content"
          schema:
            $ref: "#/definitions/Task"
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/BadRequest"
        404: 
          description: "Not Found"
    delete:
      tags:
      - "task"
      summary: "Delete existing Task"
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "planId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "stageId"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      - name: "jobId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "taskId"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "No Content"
          schema:
            $ref: "#/definitions/Task"
        404: 
          description: "Not Found"
    get:
      tags:
      - "task"
      summary: "Retrieve Existing Task"
      parameters:
      - name: "projectId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "planId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "stageId"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      - name: "jobId"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      - name: "taskId"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Task"
        404: 
          description: "Not Found"
  /dimages:
    post:
      tags:
      - "dimage"
      summary: "Add a DImage"
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema: 
          $ref: "#/definitions/DImage"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/DImage"
        400: 
          description: Bad Request
          schema:
            $ref: "#/definitions/BadRequest"
        409:
          description: Conflict
    get:
      tags:
      - "dimage"
      summary: "Retrieve All DImages"
      operationId: "getDImages"
      responses:
        200:
          description: OK
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DImage"
  /dimages/{dimageId}:
    put:
      tags:
      - "dimage"
      summary: "Update existing DImage"
      parameters:
      - name: "dimageId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "DImage object"
        required: true
        schema:
          $ref: "#/definitions/DImage"
      responses:
        204:
          description: "No Content"
          schema:
            $ref: "#/definitions/DImage"
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/BadRequest"
        404: 
          description: "Not Found"
    delete:
      tags:
      - "dimage"
      summary: "Delete existing Dimage"
      parameters:
      - name: "dimageId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "No Content"
          schema:
            $ref: "#/definitions/DImage"
        404: 
          description: "Not Found"
    get:
      tags:
      - "dimage"
      summary: "Retrieve Existing DImage"
      parameters:
      - name: "dimageId"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/DImage"
        404: 
          description: "Not Found"
  /workers:
    post:
      tags:
      - "worker"
      summary: "Add a Worker"
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema: 
          $ref: "#/definitions/Worker"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Worker"
        400: 
          description: Bad Request
          schema:
            $ref: "#/definitions/BadRequest"
        409:
          description: Conflict
    get:
      tags:
      - "worker"
      summary: "Retrieve All Workers"
      operationId: "getWorkers"
      responses:
        200:
          description: OK
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DImage"
  /workers/{workerId}:
    put:
      tags:
      - "worker"
      summary: "Update existing Worker"
      parameters:
      - name: "workerId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Worker object"
        required: true
        schema:
          $ref: "#/definitions/Worker"
      responses:
        204:
          description: "No Content"
          schema:
            $ref: "#/definitions/Worker"
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/BadRequest"
        404: 
          description: "Not Found"
    delete:
      tags:
      - "worker"
      summary: "Delete existing Worker"
      parameters:
      - name: "workerId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "No Content"
          schema:
            $ref: "#/definitions/Worker"
        404: 
          description: "Not Found"
    get:
      tags:
      - "worker"
      summary: "Retrieve Existing Worker"
      parameters:
      - name: "workerId"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Worker"
        404: 
          description: "Not Found"
  /variable/{variableId}:
    put:
      tags:
      - "variable"
      summary: "Update existing Variable"
      parameters:
      - name: "variableId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Variable object"
        required: true
        schema:
          $ref: "#/definitions/Variable"
      responses:
        204:
          description: "No Content"
          schema:
            $ref: "#/definitions/Variable"
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/BadRequest"
        404: 
          description: "Not Found"
  /users:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    post:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/Login"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username/password supplied"
  /user/{username}/logout:
    put:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: 
      - name: "username"
        in: "path"
        description: "The user name for login"
        required: true
        type: "string"
      responses:
        204:
          description: "Accepted"
          schema:
            $ref: "#/definitions/User"
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/BadRequest"
        404: 
          description: "Not Found"
  /users/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
  /health:
    get:
      tags:
      - "vitals"
      summary: "Get Health of Governor Application"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Health"
  /heartbeat:
    get:
      tags:
      - "vitals"
      summary: "Get Heartbeat of Governor Application"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Heartbeat"
  /status:
    get:
      tags:
      - "vitals"
      summary: "Get Status of Governor Application"
      produces:
      - "application/json"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Status"
  /pipelines:
    post:
      tags: 
      - "pipeline"
      summary: "Create New Pipeline"
      operationId: "addPipeline"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pipeline object"
        required: true
        schema:
          $ref: "#/definitions/Pipeline"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/Pipeline"
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/BadRequest"
        409:
          description: "Conflict"
    get:
      tags:
      - "pipeline"
      summary: "Retrieve All Pipeline"
      operationId: "getPipelines"
      responses:
        200:
          description: OK
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pipeline"
  /pipelines/{pipelineId}:
    put:
      tags:
      - "pipeline"
      summary: "Update existing Pipeline"
      parameters:
      - name: "pipelineId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Pipeline object"
        required: true
        schema:
          $ref: "#/definitions/Pipeline"
      responses:
        204:
          description: "No Content"
          schema:
            $ref: "#/definitions/Pipeline"
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/BadRequest"
        404: 
          description: "Not Found"
    delete:
      tags:
      - "pipeline"
      summary: "Delete existing Pipeline"
      parameters:
      - name: "pipelineId"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      responses:
        204:
          description: "No Content"
          schema:
            $ref: "#/definitions/Pipeline"
        404: 
          description: "Not Found"
    get:
      tags:
      - "pipeline"
      summary: "Retrieve Existing Pipeline"
      parameters:
      - name: "pipelineId"
        in: "path"
        description: ""
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Pipeline"
        404: 
          description: "Not Found"
  /{action}/pipeline/{pipelineId}:
    post:
      tags:
      - "action"
      summary: "Action on a pipeline"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema: 
          $ref: "#/definitions/Pipeline"
      - name: "pipelineId"
        in: "path"
        required: true
        type: "string"
      - name: "action"
        in: "path"
        required: true
        type: "string"
        enum:
        - "run"
        - "stop"
      responses:
        201: 
          description: "Created"
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/BadRequest"
  /{action}/plan/{planId}:
    post:
      tags:
      - "action"
      summary: "Action on a pipeline"
      produces:
      - "application/json"
      parameters:
      - name: "body"
        in: "body"
        required: true
        schema: 
          $ref: "#/definitions/Plan"
      - name: "planId"
        in: "path"
        required: true
        type: "integer"
        format: "int64"
      - name: "action"
        in: "path"
        required: true
        type: "string"
        enum:
        - "run"
        - "stop"
      responses:
        201: 
          description: "Created"
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/BadRequest"
definitions:
  Pipeline:
    type: "object"
    required:
    - "id"
    - "name"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      components:
        type: "array"
        items:
          $ref: "#/definitions/Component"
      enabled:
        type: "boolean"
  Component:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "string"
      type:
        type: "string"
        enum:
        - "plan"
        - "trigger"
        - "notification"
      sequence:
        type: "integer"
        format: "int64"
  Dependency:
    type: "object"
    required:
    - "id"
    - "name"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      status:
        type: "string"
        enum: 
        - "up"
        - "down"
        - "unknown"
  Status:
    type: "object"
    required:
    - "id"
    - "name"
    properties:
      id:
        type: "string"
      overallstatus:
        type: "string"
        enum: 
        - "up"
        - "down"
        - "unknown"
      dependencies:
        type: "array"
        items:
          $ref: "#/definitions/Dependency"
  Heartbeat:
    type: "object"
    required:
    - "pulse"
    properties:
      pulse:
        type: "string"
  Health:
    type: "object"
    required:
    - "version"
    - "appname"
    - "buildtime"
    - "releasetime"
    - "buildnumber"
    properties:
      version:
        type: "string"
      appname:
        type: "string"
      buildtime:
        type: "string"
      releasetime:
        type: "string"
      buildnumber:
        type: "string"
  Role:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
        enum:
        - "admin"
        - "edit"
        - "view"
        - "run"
        - "prodedit"
        - "prodrun"
      status:
        type: "string"
        description: "Role Status"
        enum:
        - "active"
        - "pending"
        - "suspended"
        - "inactive"
  DImage:
    type: "object"
    properties:
      id:
        type: "string"
      shortname:
        type: "string"
      imagename:
        type: "string"
      imageversion:
        type: "string"
      imageid:
        type: "string"
      imagetag:
        type: "string"
  Trigger:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      enabled:
        type: "boolean"
      class:
        type: "string"
        enum:
        - "schedule"
        - "changelistener"
        - "resultlistener"
  Notification:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      to:
        type: "string"
      type:
        type: "string"
      enabled:
        type: "boolean"
  Project:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      shortname:
        type: "string"
      plans:
        type: "array"
        items:
          $ref: "#/definitions/Index"
      variables:
        type: "array"
        items:
          $ref: "#/definitions/Variable"
      enabled:
        type: "boolean"
  Index:
    type: "object"
    properties:
      id:
        type: "string"
      sequence:
        type: "integer"
        format: "int64"
  Variable:
    type: "object"
    properties:
      id:
        type: "string"
      key:
        type: "string"
      value:
        type: "string"
  Plan:
    type: "object"
    properties:
      id:
        type: "string"
      projectid: 
        type: "string"
      name:
        type: "string"
      type:
        type: "string"
        enum:
        - "build"
        - "deploy"
        - "test"
        - "monitor"
        - "validate"
      environment:
        type: "string"
        enum:
        - "prod"
        - "nonprod"
      shortname:
        type: "string"
      stages:
        type: "array"
        items:
          $ref: "#/definitions/Index"
      variables:
        type: "array"
        items:
          $ref: "#/definitions/Variable"
      enabled:
        type: "boolean"
  Stage:
    type: "object"
    properties:
      id:
        type: "string"
      projectid: 
        type: "string"
      planid:
        type: "string"
      name:
        type: "string"
      shortname:
        type: "string"
      sequence:
        type: "integer"
        format: "int64"
      stages:
        type: "array"
        items:
          $ref: "#/definitions/Index"
      variables:
        type: "array"
        items:
          $ref: "#/definitions/Variable"
      enabled:
        type: "boolean"
  Job:
    type: "object"
    properties:
      id:
        type: "string"
      projectid: 
        type: "string"
      planid:
        type: "string"
      stageid:
        type: "string"
      name:
        type: "string"
      shortname:
        type: "string"
      tasks:
        type: "array"
        items:
          $ref: "#/definitions/Index"
      variables:
        type: "array"
        items:
          $ref: "#/definitions/Variable"
      enabled:
        type: "boolean"
  Task:
    type: "object"
    properties:
      id:
        type: "string"
      projectid: 
        type: "string"
      planid:
        type: "string"
      stageid:
        type: "string"
      jobid:
        type: "string"
      name:
        type: "string"
      shortname:
        type: "string"
      sequence:
        type: "integer"
        format: "int64"
      variables:
        type: "array"
        items:
          $ref: "#/definitions/Variable"
      enabled:
        type: "boolean"
  BadRequest:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
      fields:
        type: "array"
        items:
          type: "string"
  Login:
    type: "object"
    properties:
      username: 
        type: "string"
      password:
        type: "string"
  Worker:
    type: "object"
    properties:
      id:
        type: "string"
      sequence:
        type: "integer"
        format: "int64"
      ipaddr:
        type: "string"
      hostname:
        type: "string"
      username:
        type: "string"
      password:
        type: "string"
      status:
        type: "string"
        enum: 
        - "active"
        - "pending"
        - "suspended"
  User:
    type: "object"
    properties:
      id:
        type: "string"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      roles:
        type: "array"
        items:
          type: "string"
      tier:
        type: "string"
        enum:
        - "enterprise"
        - "free"
      status:
        type: "string"
        enum:
        - "active"
        - "pending"
        - "suspended"