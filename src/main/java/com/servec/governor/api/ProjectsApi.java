/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.servec.governor.api;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.servec.governor.models.BadRequest;
import com.servec.governor.models.Job;
import com.servec.governor.models.Plan;
import com.servec.governor.models.Project;
import com.servec.governor.models.Stage;
import com.servec.governor.models.Task;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-12-22T04:22:26.530Z")

@Api(value = "projects", description = "the projects API")
public interface ProjectsApi {

	@ApiOperation(value = "Create New Job", nickname = "addJob", notes = "", response = Job.class, tags = { "job", })
	@ApiResponses(value = { @ApiResponse(code = 201, message = "Created", response = Job.class),
			@ApiResponse(code = 400, message = "Bad Request", response = BadRequest.class),
			@ApiResponse(code = 409, message = "Conflict") })
	@RequestMapping(value = "/projects/{projectId}/plans/{planId}/stages/{stageId}/jobs", produces = {
			"application/json" }, consumes = { "application/json" }, method = RequestMethod.POST)
	ResponseEntity<Job> addJob(@ApiParam(value = "", required = true) @PathVariable("projectId") String projectId,
			@ApiParam(value = "", required = true) @PathVariable("planId") String planId,
			@ApiParam(value = "", required = true) @PathVariable("stageId") String stageId,
			@ApiParam(value = "Job object", required = true) @Valid @RequestBody Job body);

	@ApiOperation(value = "Create New Plan", nickname = "addPlan", notes = "", response = Plan.class, tags = {
			"plan", })
	@ApiResponses(value = { @ApiResponse(code = 201, message = "Created", response = Plan.class),
			@ApiResponse(code = 400, message = "Bad Request", response = BadRequest.class),
			@ApiResponse(code = 409, message = "Conflict") })
	@RequestMapping(value = "/projects/{projectId}/plans", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	ResponseEntity<Plan> addPlan(@ApiParam(value = "", required = true) @PathVariable("projectId") String projectId,
			@ApiParam(value = "Plan object", required = true) @Valid @RequestBody Plan body);

	@ApiOperation(value = "Create New Project", nickname = "addProject", notes = "", response = Project.class, tags = {
			"project", })
	@ApiResponses(value = { @ApiResponse(code = 201, message = "Created", response = Project.class),
			@ApiResponse(code = 400, message = "Bad Request", response = BadRequest.class),
			@ApiResponse(code = 409, message = "Conflict") })
	@RequestMapping(value = "/projects", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	ResponseEntity<Project> addProject(
			@ApiParam(value = "Project object", required = true) @Valid @RequestBody Project body);

	@ApiOperation(value = "Create New Stage", nickname = "addStage", notes = "", response = Stage.class, tags = {
			"stage", })
	@ApiResponses(value = { @ApiResponse(code = 201, message = "Created", response = Stage.class),
			@ApiResponse(code = 400, message = "Bad Request", response = BadRequest.class),
			@ApiResponse(code = 409, message = "Conflict") })
	@RequestMapping(value = "/projects/{projectId}/plans/{planId}/stages", produces = {
			"application/json" }, consumes = { "application/json" }, method = RequestMethod.POST)
	ResponseEntity<Stage> addStage(@ApiParam(value = "", required = true) @PathVariable("projectId") String projectId,
			@ApiParam(value = "", required = true) @PathVariable("planId") String planId,
			@ApiParam(value = "Stage object", required = true) @Valid @RequestBody Stage body);

	@ApiOperation(value = "Create New Task", nickname = "addTask", notes = "", response = Task.class, tags = {
			"task", })
	@ApiResponses(value = { @ApiResponse(code = 201, message = "Created", response = Task.class),
			@ApiResponse(code = 400, message = "Bad Request", response = BadRequest.class),
			@ApiResponse(code = 409, message = "Conflict") })
	@RequestMapping(value = "/projects/{projectId}/plans/{planId}/stages/{stageId}/jobs/{jobId}/tasks", produces = {
			"application/json" }, consumes = { "application/json" }, method = RequestMethod.POST)
	ResponseEntity<Task> addTask(@ApiParam(value = "", required = true) @PathVariable("projectId") String projectId,
			@ApiParam(value = "", required = true) @PathVariable("planId") String planId,
			@ApiParam(value = "", required = true) @PathVariable("stageId") String stageId,
			@ApiParam(value = "", required = true) @PathVariable("jobId") String jobId,
			@ApiParam(value = "Task object", required = true) @Valid @RequestBody Task body);

	@ApiOperation(value = "Delete existing Job", nickname = "deleteJobById", notes = "", response = Job.class, tags = {
			"job", })
	@ApiResponses(value = { @ApiResponse(code = 204, message = "No Content", response = Job.class),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/projects/{projectId}/plans/{planId}/stages/{stageId}/jobs/{jobId}", method = RequestMethod.DELETE)
	ResponseEntity<Job> deleteJobById(
			@ApiParam(value = "", required = true) @PathVariable("projectId") String projectId,
			@ApiParam(value = "", required = true) @PathVariable("planId") String planId,
			@ApiParam(value = "", required = true) @PathVariable("stageId") String stageId,
			@ApiParam(value = "", required = true) @PathVariable("jobId") String jobId);

	@ApiOperation(value = "Delete existing plan", nickname = "deletePlanById", notes = "", response = Plan.class, tags = {
			"plan", })
	@ApiResponses(value = { @ApiResponse(code = 204, message = "No Content", response = Plan.class),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/projects/{projectId}/plans/{planId}", method = RequestMethod.DELETE)
	ResponseEntity<Plan> deletePlanById(
			@ApiParam(value = "", required = true) @PathVariable("projectId") String projectId,
			@ApiParam(value = "", required = true) @PathVariable("planId") String planId);

	@ApiOperation(value = "Retrieve Existing Job", nickname = "getJobById", notes = "", response = Job.class, tags = {
			"job", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = Job.class),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/projects/{projectId}/plans/{planId}/stages/{stageId}/jobs/{jobId}", method = RequestMethod.GET)
	ResponseEntity<Job> getJobById(@ApiParam(value = "", required = true) @PathVariable("projectId") String projectId,
			@ApiParam(value = "", required = true) @PathVariable("planId") String planId,
			@ApiParam(value = "", required = true) @PathVariable("stageId") String stageId,
			@ApiParam(value = "", required = true) @PathVariable("jobId") String jobId);

	@ApiOperation(value = "Retrieve All Jobs", nickname = "getJobs", notes = "", response = Job.class, responseContainer = "List", tags = {
			"job", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "OK", response = Job.class, responseContainer = "List") })
	@RequestMapping(value = "/projects/{projectId}/plans/{planId}/stages/{stageId}/jobs", method = RequestMethod.GET)
	ResponseEntity<List<Job>> getJobs(
			@ApiParam(value = "", required = true) @PathVariable("projectId") String projectId,
			@ApiParam(value = "", required = true) @PathVariable("planId") String planId,
			@ApiParam(value = "", required = true) @PathVariable("stageId") String stageId);

	@ApiOperation(value = "Retrieve Existing Plan", nickname = "getPlanById", notes = "", response = Plan.class, tags = {
			"plan", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = Plan.class),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/projects/{projectId}/plans/{planId}", method = RequestMethod.GET)
	ResponseEntity<Plan> getPlanById(@ApiParam(value = "", required = true) @PathVariable("projectId") String projectId,
			@ApiParam(value = "", required = true) @PathVariable("planId") String planId);

	@ApiOperation(value = "Retrieve All Plans", nickname = "getPlans", notes = "", response = Plan.class, responseContainer = "List", tags = {
			"plan", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "OK", response = Plan.class, responseContainer = "List") })
	@RequestMapping(value = "/projects/{projectId}/plans", method = RequestMethod.GET)
	ResponseEntity<List<Plan>> getPlans(
			@ApiParam(value = "", required = true) @PathVariable("projectId") String projectId);

	@ApiOperation(value = "Retrieve All Projects", nickname = "getProjects", notes = "", response = Project.class, responseContainer = "List", tags = {
			"project", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "OK", response = Project.class, responseContainer = "List") })
	@RequestMapping(value = "/projects", method = RequestMethod.GET)
	ResponseEntity<List<Project>> getProjects() throws JsonMappingException, JsonProcessingException;

	@ApiOperation(value = "Retrieve All Stages", nickname = "getStages", notes = "", response = Stage.class, responseContainer = "List", tags = {
			"stage", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "OK", response = Stage.class, responseContainer = "List") })
	@RequestMapping(value = "/projects/{projectId}/plans/{planId}/stages", method = RequestMethod.GET)
	ResponseEntity<List<Stage>> getStages(
			@ApiParam(value = "", required = true) @PathVariable("projectId") String projectId,
			@ApiParam(value = "", required = true) @PathVariable("planId") String planId);

	@ApiOperation(value = "Retrieve All Tasks", nickname = "getTasks", notes = "", response = Task.class, responseContainer = "List", tags = {
			"task", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "OK", response = Task.class, responseContainer = "List") })
	@RequestMapping(value = "/projects/{projectId}/plans/{planId}/stages/{stageId}/jobs/{jobId}/tasks", method = RequestMethod.GET)
	ResponseEntity<List<Task>> getTasks(
			@ApiParam(value = "", required = true) @PathVariable("projectId") String projectId,
			@ApiParam(value = "", required = true) @PathVariable("planId") String planId,
			@ApiParam(value = "", required = true) @PathVariable("stageId") String stageId,
			@ApiParam(value = "", required = true) @PathVariable("jobId") String jobId);

	@ApiOperation(value = "Delete existing Project", nickname = "projectsProjectIdDelete", notes = "", response = Project.class, tags = {
			"project", })
	@ApiResponses(value = { @ApiResponse(code = 204, message = "No Content", response = Project.class),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/projects/{projectId}", method = RequestMethod.DELETE)
	ResponseEntity<Project> projectsProjectIdDelete(
			@ApiParam(value = "", required = true) @PathVariable("projectId") String projectId);

	@ApiOperation(value = "Retrieve Existing Project", nickname = "projectsProjectIdGet", notes = "", response = Project.class, tags = {
			"project", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = Project.class),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/projects/{projectId}", method = RequestMethod.GET)
	ResponseEntity<Project> projectsProjectIdGet(
			@ApiParam(value = "", required = true) @PathVariable("projectId") String projectId);

	@ApiOperation(value = "Delete existing Stage", nickname = "projectsProjectIdPlansPlanIdStagesStageIdDelete", notes = "", response = Stage.class, tags = {
			"stage", })
	@ApiResponses(value = { @ApiResponse(code = 204, message = "No Content", response = Stage.class),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/projects/{projectId}/plans/{planId}/stages/{stageId}", method = RequestMethod.DELETE)
	ResponseEntity<Stage> projectsProjectIdPlansPlanIdStagesStageIdDelete(
			@ApiParam(value = "", required = true) @PathVariable("projectId") String projectId,
			@ApiParam(value = "", required = true) @PathVariable("planId") String planId,
			@ApiParam(value = "", required = true) @PathVariable("stageId") String stageId);

	@ApiOperation(value = "Retrieve Existing Stage", nickname = "projectsProjectIdPlansPlanIdStagesStageIdGet", notes = "", response = Stage.class, tags = {
			"stage", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = Stage.class),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/projects/{projectId}/plans/{planId}/stages/{stageId}", method = RequestMethod.GET)
	ResponseEntity<Stage> projectsProjectIdPlansPlanIdStagesStageIdGet(
			@ApiParam(value = "", required = true) @PathVariable("projectId") String projectId,
			@ApiParam(value = "", required = true) @PathVariable("planId") String planId,
			@ApiParam(value = "", required = true) @PathVariable("stageId") String stageId);

	@ApiOperation(value = "Delete existing Task", nickname = "projectsProjectIdPlansPlanIdStagesStageIdJobsJobIdTasksTaskIdDelete", notes = "", response = Task.class, tags = {
			"task", })
	@ApiResponses(value = { @ApiResponse(code = 204, message = "No Content", response = Task.class),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/projects/{projectId}/plans/{planId}/stages/{stageId}/jobs/{jobId}/tasks/{taskId}", method = RequestMethod.DELETE)
	ResponseEntity<Task> projectsProjectIdPlansPlanIdStagesStageIdJobsJobIdTasksTaskIdDelete(
			@ApiParam(value = "", required = true) @PathVariable("projectId") String projectId,
			@ApiParam(value = "", required = true) @PathVariable("planId") String planId,
			@ApiParam(value = "", required = true) @PathVariable("stageId") String stageId,
			@ApiParam(value = "", required = true) @PathVariable("jobId") String jobId,
			@ApiParam(value = "", required = true) @PathVariable("taskId") String taskId);

	@ApiOperation(value = "Retrieve Existing Task", nickname = "projectsProjectIdPlansPlanIdStagesStageIdJobsJobIdTasksTaskIdGet", notes = "", response = Task.class, tags = {
			"task", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = Task.class),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/projects/{projectId}/plans/{planId}/stages/{stageId}/jobs/{jobId}/tasks/{taskId}", method = RequestMethod.GET)
	ResponseEntity<Task> projectsProjectIdPlansPlanIdStagesStageIdJobsJobIdTasksTaskIdGet(
			@ApiParam(value = "", required = true) @PathVariable("projectId") String projectId,
			@ApiParam(value = "", required = true) @PathVariable("planId") String planId,
			@ApiParam(value = "", required = true) @PathVariable("stageId") String stageId,
			@ApiParam(value = "", required = true) @PathVariable("jobId") String jobId,
			@ApiParam(value = "", required = true) @PathVariable("taskId") String taskId);

	@ApiOperation(value = "Update existing Task", nickname = "projectsProjectIdPlansPlanIdStagesStageIdJobsJobIdTasksTaskIdPut", notes = "", response = Task.class, tags = {
			"task", })
	@ApiResponses(value = { @ApiResponse(code = 204, message = "No Content", response = Task.class),
			@ApiResponse(code = 400, message = "Bad Request", response = BadRequest.class),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/projects/{projectId}/plans/{planId}/stages/{stageId}/jobs/{jobId}/tasks/{taskId}", method = RequestMethod.PUT)
	ResponseEntity<Task> projectsProjectIdPlansPlanIdStagesStageIdJobsJobIdTasksTaskIdPut(
			@ApiParam(value = "", required = true) @PathVariable("projectId") String projectId,
			@ApiParam(value = "", required = true) @PathVariable("planId") String planId,
			@ApiParam(value = "", required = true) @PathVariable("stageId") String stageId,
			@ApiParam(value = "", required = true) @PathVariable("jobId") String jobId,
			@ApiParam(value = "", required = true) @PathVariable("taskId") String taskId,
			@ApiParam(value = "Task object", required = true) @Valid @RequestBody Task body);

	@ApiOperation(value = "Update existing Stage", nickname = "projectsProjectIdPlansPlanIdStagesStageIdPut", notes = "", response = Stage.class, tags = {
			"stage", })
	@ApiResponses(value = { @ApiResponse(code = 204, message = "No Content", response = Stage.class),
			@ApiResponse(code = 400, message = "Bad Request", response = BadRequest.class),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/projects/{projectId}/plans/{planId}/stages/{stageId}", method = RequestMethod.PUT)
	ResponseEntity<Stage> projectsProjectIdPlansPlanIdStagesStageIdPut(
			@ApiParam(value = "", required = true) @PathVariable("projectId") String projectId,
			@ApiParam(value = "", required = true) @PathVariable("planId") String planId,
			@ApiParam(value = "", required = true) @PathVariable("stageId") String stageId,
			@ApiParam(value = "Stage object", required = true) @Valid @RequestBody Stage body);

	@ApiOperation(value = "Update existing Project", nickname = "projectsProjectIdPut", notes = "", response = Project.class, tags = {
			"project", })
	@ApiResponses(value = { @ApiResponse(code = 204, message = "No Content", response = Project.class),
			@ApiResponse(code = 400, message = "Bad Request", response = BadRequest.class),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/projects/{projectId}", method = RequestMethod.PUT)
	ResponseEntity<Project> projectsProjectIdPut(
			@ApiParam(value = "", required = true) @PathVariable("projectId") String projectId,
			@ApiParam(value = "Project object", required = true) @Valid @RequestBody Project body);

	@ApiOperation(value = "Update existing job", nickname = "updateJobById", notes = "", response = Job.class, tags = {
			"job", })
	@ApiResponses(value = { @ApiResponse(code = 204, message = "No Content", response = Job.class),
			@ApiResponse(code = 400, message = "Bad Request", response = BadRequest.class),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/projects/{projectId}/plans/{planId}/stages/{stageId}/jobs/{jobId}", method = RequestMethod.PUT)
	ResponseEntity<Job> updateJobById(
			@ApiParam(value = "", required = true) @PathVariable("projectId") String projectId,
			@ApiParam(value = "", required = true) @PathVariable("planId") String planId,
			@ApiParam(value = "", required = true) @PathVariable("stageId") String stageId,
			@ApiParam(value = "", required = true) @PathVariable("jobId") String jobId,
			@ApiParam(value = "Job object", required = true) @Valid @RequestBody Job body);

	@ApiOperation(value = "Update existing Plan", nickname = "updatePlanById", notes = "", response = Plan.class, tags = {
			"plan", })
	@ApiResponses(value = { @ApiResponse(code = 204, message = "No Content", response = Plan.class),
			@ApiResponse(code = 400, message = "Bad Request", response = BadRequest.class),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/projects/{projectId}/plans/{planId}", method = RequestMethod.PUT)
	ResponseEntity<Plan> updatePlanById(
			@ApiParam(value = "", required = true) @PathVariable("projectId") String projectId,
			@ApiParam(value = "", required = true) @PathVariable("planId") String planId,
			@ApiParam(value = "Plan object", required = true) @Valid @RequestBody Plan body);

}
