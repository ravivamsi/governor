/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.servec.governor.api;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.servec.governor.models.User;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-12-22T04:22:26.530Z")

@Api(value = "users", description = "the users API")
public interface UsersApi {

	@ApiOperation(value = "Create user", nickname = "createUser", notes = "This can only be done by the logged in user.", tags = {
			"user", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation") })
	@RequestMapping(value = "/users", produces = { "application/xml", "application/json" }, method = RequestMethod.POST)
	ResponseEntity<Void> createUser(
			@ApiParam(value = "Created user object", required = true) @Valid @RequestBody User body);

	@ApiOperation(value = "Delete user", nickname = "deleteUser", notes = "This can only be done by the logged in user.", tags = {
			"user", })
	@ApiResponses(value = { @ApiResponse(code = 400, message = "Invalid username supplied"),
			@ApiResponse(code = 404, message = "User not found") })
	@RequestMapping(value = "/users/{username}", produces = { "application/xml",
			"application/json" }, method = RequestMethod.DELETE)
	ResponseEntity<Void> deleteUser(
			@ApiParam(value = "The name that needs to be deleted", required = true) @PathVariable("username") String username);

	@ApiOperation(value = "Get user by user name", nickname = "getUserByName", notes = "", response = User.class, tags = {
			"user", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "successful operation", response = User.class),
			@ApiResponse(code = 400, message = "Invalid username supplied"),
			@ApiResponse(code = 404, message = "User not found") })
	@RequestMapping(value = "/users/{username}", produces = { "application/xml",
			"application/json" }, method = RequestMethod.GET)
	ResponseEntity<User> getUserByName(
			@ApiParam(value = "The name that needs to be fetched. Use user1 for testing. ", required = true) @PathVariable("username") String username);

	@ApiOperation(value = "Updated user", nickname = "updateUser", notes = "This can only be done by the logged in user.", tags = {
			"user", })
	@ApiResponses(value = { @ApiResponse(code = 400, message = "Invalid user supplied"),
			@ApiResponse(code = 404, message = "User not found") })
	@RequestMapping(value = "/users/{username}", produces = { "application/xml",
			"application/json" }, method = RequestMethod.PUT)
	ResponseEntity<Void> updateUser(
			@ApiParam(value = "name that need to be updated", required = true) @PathVariable("username") String username,
			@ApiParam(value = "Updated user object", required = true) @Valid @RequestBody User body);

}
