/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.cgovern.governor.api;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.cgovern.governor.models.BadRequest;
import com.cgovern.governor.models.Task;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-12-22T04:22:26.530Z")

@Api(value = "projects", description = "the projects API")
public interface TasksApi {

	@ApiOperation(value = "Create New Task", nickname = "addTask", notes = "", response = Task.class, tags = {
			"task", })
	@ApiResponses(value = { @ApiResponse(code = 201, message = "Created", response = Task.class),
			@ApiResponse(code = 400, message = "Bad Request", response = BadRequest.class),
			@ApiResponse(code = 409, message = "Conflict") })
	@RequestMapping(value = "/jobs/{jobId}/tasks", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	ResponseEntity<Task> addTask(@ApiParam(value = "", required = true) @PathVariable("jobId") String jobId,
			@ApiParam(value = "Task object", required = true) @Valid @RequestBody Task body);

	@ApiOperation(value = "Retrieve All Tasks", nickname = "getTasks", notes = "", response = Task.class, responseContainer = "List", tags = {
			"task", })
	@ApiResponses(value = {
			@ApiResponse(code = 200, message = "OK", response = Task.class, responseContainer = "List") })
	@RequestMapping(value = "/jobs/{jobId}/tasks", method = RequestMethod.GET)
	ResponseEntity<List<Task>> getTasks(@ApiParam(value = "", required = true) @PathVariable("jobId") String jobId);

	@ApiOperation(value = "Delete existing Task", nickname = "jobsJobIdTasksTaskIdDelete", notes = "", response = Task.class, tags = {
			"task", })
	@ApiResponses(value = { @ApiResponse(code = 204, message = "No Content", response = Task.class),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/jobs/{jobId}/tasks/{taskId}", method = RequestMethod.DELETE)
	ResponseEntity<Task> jobsJobIdTasksTaskIdDelete(
			@ApiParam(value = "", required = true) @PathVariable("jobId") String jobId,
			@ApiParam(value = "", required = true) @PathVariable("taskId") String taskId);

	@ApiOperation(value = "Retrieve Existing Task", nickname = "jobsJobIdTasksTaskIdGet", notes = "", response = Task.class, tags = {
			"task", })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = Task.class),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/jobs/{jobId}/tasks/{taskId}", method = RequestMethod.GET)
	ResponseEntity<Task> jobsJobIdTasksTaskIdGet(

			@ApiParam(value = "", required = true) @PathVariable("jobId") String jobId,
			@ApiParam(value = "", required = true) @PathVariable("taskId") String taskId);

	@ApiOperation(value = "Update existing Task", nickname = "jobsJobIdTasksTaskIdPut", notes = "", response = Task.class, tags = {
			"task", })
	@ApiResponses(value = { @ApiResponse(code = 204, message = "No Content", response = Task.class),
			@ApiResponse(code = 400, message = "Bad Request", response = BadRequest.class),
			@ApiResponse(code = 404, message = "Not Found") })
	@RequestMapping(value = "/jobs/{jobId}/tasks/{taskId}", method = RequestMethod.PUT)
	ResponseEntity<Task> jobsJobIdTasksTaskIdPut(

			@ApiParam(value = "", required = true) @PathVariable("jobId") String jobId,
			@ApiParam(value = "", required = true) @PathVariable("taskId") String taskId,
			@ApiParam(value = "Task object", required = true) @Valid @RequestBody Task body);

}
